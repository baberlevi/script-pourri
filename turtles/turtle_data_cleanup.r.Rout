
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> #read in the file as a dataframe
> npt_df <- read.table("NestingPlusTrapping.txt", header=TRUE)
> 
> #one record has a mixedcase Pm, updating for consistency
> npt_df[npt_df$AP == "Pm" & !is.na(npt_df$AP), c("AP")] <- "PM"
> 
> #fill in avg AM time for Time with NA, and AP of 'AM'
> npt_df$Time[is.na(npt_df$Time) & npt_df$AP=="AM" & !is.na(npt_df$AP)] <- as.integer(round(mean(subset(npt_df, AP=='AM' & !is.na(Time))$Time)))
> 
> #fill in avg PM time for Time with NA, and AP of 'PM'
> npt_df$Time[is.na(npt_df$Time) & npt_df$AP=="PM" & !is.na(npt_df$AP)] <- as.integer(round(mean(subset(npt_df, AP=='PM' & !is.na(Time))$Time)))
> 
> #at time of writing 20160728-09:10 there are still 4026 records with no time or AM/PM indicator
> missingampm <- length(npt_df$AP[is.na(npt_df$AP) & is.na(npt_df$Time)])
> 
> #modify the layout of scute marks from L1-L4 and R1-R3 to leftScute1-leftScute12 and rightScute1-rightScute12
> 
> for (i in  1:12){
+ 
+   #setup new column name
+   new_left_col <- paste0("leftScute", as.character(i))
+   #create the new column, fill it with false
+   npt_df[[new_left_col]] <- FALSE
+ 
+   #setup new column name
+   new_right_col <- paste0("rightScute", as.character(i))
+   #create the new column, fill it with false
+   npt_df[[new_right_col]] <- FALSE
+ 
+ 
+   #Left scute marks
+   for (j in 1:4){
+     #look at one legacy col at a time
+     legacy_col <- paste0("L",as.character(j))
+     #fill in true where appropriate in the new column based on the legacy column
+     npt_df[(!is.na(npt_df[[legacy_col]])) & npt_df[[legacy_col]]== i , new_left_col] <- TRUE
+   }
+ 
+   #Right scute marks
+   for (j in 1:3){
+     #look at one legacy col at a time
+     legacy_col <- paste0("R",as.character(j))
+     #fill in true where appropriate in the new column based on the legacy column
+     npt_df[!is.na(npt_df[[legacy_col]]) & npt_df[[legacy_col]]== i , new_right_col] <- TRUE
+   }
+ }
> 
> 
> #write out a new file of the cleaned data
> write.table(npt_df, file = "turtlebase_cleaned.csv", sep=",", na="null", row.names = FALSE)
> 
> proc.time()
   user  system elapsed 
  0.999   0.048   1.032 
